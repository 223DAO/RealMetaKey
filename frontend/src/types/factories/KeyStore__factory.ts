/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { KeyStore, KeyStoreInterface } from "../KeyStore";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract NFT",
        name: "_nftContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNfts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "totalKeys",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "remainingKeys",
            type: "uint256",
          },
          {
            internalType: "string[]",
            name: "redeemedKeys",
            type: "string[]",
          },
          {
            internalType: "bool",
            name: "canRedeem",
            type: "bool",
          },
        ],
        internalType: "struct NFTState[]",
        name: "nftStates",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "redeemEnable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "redeemKey",
    outputs: [
      {
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "totalKeys",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "remainingKeys",
            type: "uint256",
          },
          {
            internalType: "string[]",
            name: "redeemedKeys",
            type: "string[]",
          },
          {
            internalType: "bool",
            name: "canRedeem",
            type: "bool",
          },
        ],
        internalType: "struct NFTState",
        name: "nftState",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "remainingKeys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "enable",
        type: "bool",
      },
    ],
    name: "setRedeemEnable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "keys",
        type: "string[]",
      },
    ],
    name: "supplyKeys",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b50604051610c98380380610c98833981810160405281019061004c91906100df565b33600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610163565b6000815190506100d98161014c565b92915050565b6000602082840312156100f157600080fd5b60006100ff848285016100ca565b91505092915050565b60006101138261012c565b9050919050565b600061012582610108565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6101558161011a565b811461016057600080fd5b50565b60805160601c610b1a61017e60003960005050610b1a6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063896bafe91161005b578063896bafe91461011457806389b86f9c14610130578063d8cb55e31461014e578063f851a4401461016c57610088565b80634baa6cc91461008d5780635c8a54a6146100ab57806363aac3a3146100c7578063704b6c02146100f8575b600080fd5b61009561018a565b6040516100a29190610930565b60405180910390f35b6100c560048036038101906100c091906104d8565b61018f565b005b6100e160048036038101906100dc9190610546565b610223565b6040516100ef9291906108d9565b60405180910390f35b610112600480360381019061010d91906104af565b610232565b005b61012e6004803603810190610129919061051d565b610306565b005b6101386103b2565b60405161014591906108be565b60405180910390f35b6101566103c3565b604051610163919061089c565b60405180910390f35b6101746103c8565b6040516101819190610881565b60405180910390f35b600090565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461021f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021690610910565b60405180910390fd5b5050565b606061022d6103ee565b915091565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b990610910565b60405180910390fd5b80600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038d90610910565b60405180910390fd5b806000806101000a81548160ff02191690831515021790555050565b60008054906101000a900460ff1681565b606090565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060c0016040528060008152602001606081526020016000815260200160008152602001606081526020016000151581525090565b60008135905061043581610a9f565b92915050565b60008083601f84011261044d57600080fd5b8235905067ffffffffffffffff81111561046657600080fd5b60208301915083602082028301111561047e57600080fd5b9250929050565b60008135905061049481610ab6565b92915050565b6000813590506104a981610acd565b92915050565b6000602082840312156104c157600080fd5b60006104cf84828501610426565b91505092915050565b600080602083850312156104eb57600080fd5b600083013567ffffffffffffffff81111561050557600080fd5b6105118582860161043b565b92509250509250929050565b60006020828403121561052f57600080fd5b600061053d84828501610485565b91505092915050565b60006020828403121561055857600080fd5b60006105668482850161049a565b91505092915050565b600061057b83836106ae565b905092915050565b600061058f8383610743565b905092915050565b6105a0816109ea565b82525050565b60006105b18261096b565b6105bb81856109a6565b9350836020820285016105cd8561094b565b8060005b8581101561060957848403895281516105ea858261056f565b94506105f58361098c565b925060208a019950506001810190506105d1565b50829750879550505050505092915050565b600061062682610976565b61063081856109b7565b9350836020820285016106428561095b565b8060005b8581101561067e578484038952815161065f8582610583565b945061066a83610999565b925060208a01995050600181019050610646565b50829750879550505050505092915050565b610699816109fc565b82525050565b6106a8816109fc565b82525050565b60006106b982610981565b6106c381856109c8565b93506106d3818560208601610a32565b6106dc81610a65565b840191505092915050565b60006106f282610981565b6106fc81856109d9565b935061070c818560208601610a32565b61071581610a65565b840191505092915050565b600061072d6013836109d9565b915061073882610a76565b602082019050919050565b600060c08301600083015161075b6000860182610863565b506020830151848203602086015261077382826106ae565b91505060408301516107886040860182610863565b50606083015161079b6060860182610863565b50608083015184820360808601526107b382826105a6565b91505060a08301516107c860a0860182610690565b508091505092915050565b600060c0830160008301516107eb6000860182610863565b506020830151848203602086015261080382826106ae565b91505060408301516108186040860182610863565b50606083015161082b6060860182610863565b506080830151848203608086015261084382826105a6565b91505060a083015161085860a0860182610690565b508091505092915050565b61086c81610a28565b82525050565b61087b81610a28565b82525050565b60006020820190506108966000830184610597565b92915050565b600060208201905081810360008301526108b6818461061b565b905092915050565b60006020820190506108d3600083018461069f565b92915050565b600060408201905081810360008301526108f381856106e7565b9050818103602083015261090781846107d3565b90509392505050565b6000602082019050818103600083015261092981610720565b9050919050565b60006020820190506109456000830184610872565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006109f582610a08565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610a50578082015181840152602081019050610a35565b83811115610a5f576000848401525b50505050565b6000601f19601f8301169050919050565b7f6f6e6c792061646d696e2063616e2063616c6c00000000000000000000000000600082015250565b610aa8816109ea565b8114610ab357600080fd5b50565b610abf816109fc565b8114610aca57600080fd5b50565b610ad681610a28565b8114610ae157600080fd5b5056fea26469706673582212205c6b7d206e5efb01fdc7346e4037d6422aab76786f55f436bb9d2cef597a4dcc64736f6c63430008040033";

export class KeyStore__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _nftContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<KeyStore> {
    return super.deploy(_nftContract, overrides || {}) as Promise<KeyStore>;
  }
  getDeployTransaction(
    _nftContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_nftContract, overrides || {});
  }
  attach(address: string): KeyStore {
    return super.attach(address) as KeyStore;
  }
  connect(signer: Signer): KeyStore__factory {
    return super.connect(signer) as KeyStore__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KeyStoreInterface {
    return new utils.Interface(_abi) as KeyStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KeyStore {
    return new Contract(address, _abi, signerOrProvider) as KeyStore;
  }
}
